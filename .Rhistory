mean(VR)
sd(VR)
hist(VR)
n=10
m=5000
VR=0
set.seed(1)
for (j in 1:m){
y=rchisq(n,df=5,ncp=0)
VR[j]=var(y)
}
min(VR)
max(VR)
mean(VR)
sd(VR)
hist(VR)
gamma(1)
gamma(3)
C=9.8^2/gamma(2.3)
C=9.8**2/gamma(2.3)
9.8**2/gamma(2.3)
9.8^2/gamma(2.3)
c<-9.8^2/gamma(2.3)
c <- 9.8^2/gamma(2.3)
c
v1=dgamma(0.05,shape=2.3, rate=9.8)
v2=dgamma(0.2,shape=2.3, rate=9.8)
v3=dgamma(4.5,shape=2.3, rate=9.8)
v1=dgamma(0.05,shape=2.3, rate=9.8)
v2=dgamma(0.2,shape=2.3, rate=9.8)
v3=dgamma(4.5,shape=2.3, rate=9.8)
v1
v2
v3
pgamma(1.0,shape=2.3, rate=9.8)
pgamma(1.0,shape=2.3, rate=9.8)
pgamma(5.5,shape=2.3, rate=9.8)
# Use the R-function pgamma to compute the values of the prior probabilities
# P (\[Theta] <= 1.0),  P (\[Theta] <= 5.5), and P(1.0 < \[Theta] <= 5.5).
pgamma(1.0,shape=2.3, rate=9.8)
pgamma(5.5,shape=2.3, rate=9.8)
pgamma(5.5,shape=2.3, rate=9.8)-pgamma(1.0,shape=2.3, rate=9.8)
integral(dgamma(x,shape=2.3, rate=9.8)*dx, 1, 5.5)
integrate(dgamma(x,shape=2.3, rate=9.8), 1, 5.5)
integrate(function(x){dgamma(x,shape=2.3, rate=9.8)}, 1, 5.5)
qgamma(2.5/100.0,shape=2.3, rate=9.8)
qgamma(50.0/100.0,shape=2.3, rate=9.8)
qgamma(97.5/100.0,shape=2.3, rate=9.8)
n=1000
y=rgamma(n,shape=2.3, rate=9.8)
hist(y)
set.seed(1379)
n=1000
y=rgamma(n,shape=2.3, rate=9.8)
hist(y)
set.seed(1379)
n=1000
y=rgamma(n,shape=2.3, rate=9.8)
hist(y)
mean(y)
median(y)
set.seed(1379)
n=1000
y=rgamma(n,shape=2.3, rate=9.8)
hist(y)
mean(y)
median(y)
tau=log(y)
tau
tau=log(y)
hist(tau)
set.seed(1379)
n=1000
y=rgamma(n,shape=2.3, rate=9.8)
hist(y)
mean(y)
median(y)
tau=log(y)
hist(tau)
mean(tau)
median(tau)
tau=log(y)
hist(tau)
mean(tau)
median(tau)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?rbeta
theta
theta.values
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI[2]-PI[1]
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI[2][2]-PI[2][1]
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["97.5%"]-PI["2.5%"]
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["97.5%"]
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["3.5%"]
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["2.5%"][1]
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["2.5%"].value
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["2.5%"].values
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["2.5%"].value()
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["95%"]=PI["97.5%"]-PI["2.5%"]
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["95%"]=PI["97.5%"]-PI["2.5%"]
PI
tau=log(y)
hist(tau)
mean(tau)
median(tau)
PI=quantile(tau, probs = c(0.025, 0.975))
PI["95% PI"]=PI["97.5%"]-PI["2.5%"]
PI
source('~/Documents/Bayesian Statistics Methods/HW2.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW2.R', echo=TRUE)
# Bayesian Inferences for θ,
# a related parameter, and future data - A conjugate (Beta) prior analysis
# See pages 51-52 of the Text by CJBH for some of the R commands described below.
# Suppose observed data are summarized as
#  16 favored Obama Care, out of n=48 constituents polled
# NOTE: A sufficient statistic, T=number among n who favor Obama Care, exists in this
# sampling model.
# A priori, theta is believed to be within the interval [0.2 ,0.6] with high probability.
# Fit a prior density from the Beta(a,b) family to match this info - see lecture notes
# old way ( <- )to make assignments to objects in R
a.prior <- 9.2
b.prior <- 13.8
# Current way ( = ) to make assignments to objects in R
a.prior = 9.2
b.prior = 13.8
# you will find both = and <- used interchangeably in R-codes, etc.
# plotting p1(theta) - prior density
theta = seq(0,1,0.01)  # Discretize theta using a grid of size 0.01
prr.theta = dbeta(theta,shape1=a.prior,shape2=b.prior)
#print(cbind(theta, prr.theta))
par(mfrow=c(2,2))  # making two rows and two columns for plots
plot(theta,prr.theta, type="l", main=paste("Beta(a=",a.prior,",b=",b.prior,") prior"),
+                xlab="theta",ylab="Prob",cex.main=0.8)
# Likelihood, p2(tstar|theta),of the actual data from Binomial(n, theta)
n = 48    ## number of people who were polled
tstar = 16    ##  actual number who favored Obama Care
lik.theta = dbinom(tstar,size=n,prob=theta)
# Unnormalized Likelihood -kernel
lik.theta = (theta^tstar)*((1-theta)^(n-tstar))
plot(theta,lik.theta, type="l", col="blue",
+             main="Binomial Likelihood",xlab="theta",ylab="",cex.main=0.8)
# Product of Likelihood and Prior, but only
# kernel or unnormalized posterior of theta
unnorm.post.theta = lik.theta*prr.theta
plot(theta,unnorm.post.theta,type="l",main="Likelihood*Prior", col="purple",
+             cex.main=0.8)
# The Posterior is a Beta distribution due to the conjugate structure
# of the Beta prior and Binomial likelihood
# The parameters of the Beta posterior distribution
a.post = tstar + a.prior
b.post = (n-tstar)+ b.prior
a.post
b.post
post.theta = dbeta(theta,shape1=a.post, shape2=b.post)
plot(theta, post.theta, type="l", main=paste("Posterior: Beta distn (a=",
+                  a.post,",b=",b.post,")"),col="red", cex.main=0.8)
# Bayesian Inferences for θ,
# a related parameter, and future data - A conjugate (Beta) prior analysis
# See pages 51-52 of the Text by CJBH for some of the R commands described below.
# Suppose observed data are summarized as
#  16 favored Obama Care, out of n=48 constituents polled
# NOTE: A sufficient statistic, T=number among n who favor Obama Care, exists in this
# sampling model.
# A priori, theta is believed to be within the interval [0.2 ,0.6] with high probability.
# Fit a prior density from the Beta(a,b) family to match this info - see lecture notes
# old way ( <- )to make assignments to objects in R
a.prior <- 9.2
b.prior <- 13.8
# Current way ( = ) to make assignments to objects in R
a.prior = 9.2
b.prior = 13.8
# you will find both = and <- used interchangeably in R-codes, etc.
# plotting p1(theta) - prior density
theta = seq(0,1,0.01)  # Discretize theta using a grid of size 0.01
prr.theta = dbeta(theta,shape1=a.prior,shape2=b.prior)
#print(cbind(theta, prr.theta))
par(mfrow=c(2,2))  # making two rows and two columns for plots
plot(theta,prr.theta, type="l", main=paste("Beta(a=",a.prior,",b=",b.prior,") prior"),
+                xlab="theta",ylab="Prob",cex.main=0.8)
# Likelihood, p2(tstar|theta),of the actual data from Binomial(n, theta)
n = 48    ## number of people who were polled
tstar = 16    ##  actual number who favored Obama Care
lik.theta = dbinom(tstar,size=n,prob=theta)
# Unnormalized Likelihood -kernel
lik.theta = (theta^tstar)*((1-theta)^(n-tstar))
plot(theta,lik.theta, type="l", col="blue",
+             main="Binomial Likelihood",xlab="theta",ylab="",cex.main=0.8)
# Product of Likelihood and Prior, but only
# kernel or unnormalized posterior of theta
unnorm.post.theta = lik.theta*prr.theta
plot(theta,unnorm.post.theta,type="l",main="Likelihood*Prior", col="purple",
+             cex.main=0.8)
# The Posterior is a Beta distribution due to the conjugate structure
# of the Beta prior and Binomial likelihood
# The parameters of the Beta posterior distribution
a.post = tstar + a.prior
b.post = (n-tstar)+ b.prior
a.post
b.post
post.theta = dbeta(theta,shape1=a.post, shape2=b.post)
plot(theta, post.theta, type="l", main=paste("Posterior: Beta distn (a=",
+                  a.post,",b=",b.post,")"),col="red", cex.main=0.8)
# Bayesian Inferences for θ,
# a related parameter, and future data - A conjugate (Beta) prior analysis
# See pages 51-52 of the Text by CJBH for some of the R commands described below.
# Suppose observed data are summarized as
#  16 favored Obama Care, out of n=48 constituents polled
# NOTE: A sufficient statistic, T=number among n who favor Obama Care, exists in this
# sampling model.
# A priori, theta is believed to be within the interval [0.2 ,0.6] with high probability.
# Fit a prior density from the Beta(a,b) family to match this info - see lecture notes
# old way ( <- )to make assignments to objects in R
a.prior <- 9.2
b.prior <- 13.8
# Current way ( = ) to make assignments to objects in R
a.prior = 9.2
b.prior = 13.8
# you will find both = and <- used interchangeably in R-codes, etc.
# plotting p1(theta) - prior density
theta = seq(0,1,0.01)  # Discretize theta using a grid of size 0.01
prr.theta = dbeta(theta,shape1=a.prior,shape2=b.prior)
#print(cbind(theta, prr.theta))
par(mfrow=c(2,2))  # making two rows and two columns for plots
plot(theta,prr.theta, type="l", main=paste("Beta(a=",a.prior,",b=",b.prior,") prior"),
+                xlab="theta",ylab="Prob",cex.main=0.8)
# Likelihood, p2(tstar|theta),of the actual data from Binomial(n, theta)
n = 48    ## number of people who were polled
tstar = 16    ##  actual number who favored Obama Care
lik.theta = dbinom(tstar,size=n,prob=theta)
# Unnormalized Likelihood -kernel
lik.theta = (theta^tstar)*((1-theta)^(n-tstar))
plot(theta,lik.theta, type="l", col="blue", main="Binomial Likelihood",xlab="theta",ylab="",cex.main=0.8)
# Product of Likelihood and Prior, but only
# kernel or unnormalized posterior of theta
unnorm.post.theta = lik.theta*prr.theta
plot(theta,unnorm.post.theta,type="l",main="Likelihood*Prior", col="purple", cex.main=0.8)
# The Posterior is a Beta distribution due to the conjugate structure
# of the Beta prior and Binomial likelihood
# The parameters of the Beta posterior distribution
a.post = tstar + a.prior
b.post = (n-tstar)+ b.prior
a.post
b.post
post.theta = dbeta(theta,shape1=a.post, shape2=b.post)
plot(theta, post.theta, type="l", main=paste("Posterior: Beta distn (a=",
a.post,",b=",b.post,")"),col="red", cex.main=0.8)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
# Bayesian Inferences for θ,
# a related parameter, and future data - A conjugate (Beta) prior analysis
# See pages 51-52 of the Text by CJBH for some of the R commands described below.
# Suppose observed data are summarized as
#  16 favored Obama Care, out of n=48 constituents polled
# NOTE: A sufficient statistic, T=number among n who favor Obama Care, exists in this
# sampling model.
# A priori, theta is believed to be within the interval [0.2 ,0.6] with high probability.
# Fit a prior density from the Beta(a,b) family to match this info - see lecture notes
# old way ( <- )to make assignments to objects in R
a.prior <- 9.2
b.prior <- 13.8
# Current way ( = ) to make assignments to objects in R
a.prior = 9.2
b.prior = 13.8
# you will find both = and <- used interchangeably in R-codes, etc.
# plotting p1(theta) - prior density
theta = seq(0,1,0.01)  # Discretize theta using a grid of size 0.01
prr.theta = dbeta(theta,shape1=a.prior,shape2=b.prior)
#print(cbind(theta, prr.theta))
par(mfrow=c(2,2))  # making two rows and two columns for plots
plot(theta,prr.theta, type="l", main=paste("Beta(a=",a.prior,",b=",b.prior,") prior"),
xlab="theta",ylab="Prob",cex.main=0.8)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/One_Proportion_Obama_Care_Fa16.R', echo=TRUE)
set.seed(97531)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
PI=quantile(tau4, probs = c(0.025, 0.975))
PI
?stats
library(help = "stats")
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
P(1.0)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
P(1.0)
P=ecdf(tau4)
plot(P)
1-P(1.0)
source('~/Documents/Bayesian Statistics Methods/HW3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
theta1.sim.sample=runif(1000,min=0,max=1)
theta2.sim.sample=runif(1,min=theta1.sim.sample,max=1)
theta2.sim.sample
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("devtools")
library(devtools)
library(devtools)
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
library(statsr)
data(brfss)
library(s)
source('~/Documents/Bayesian Statistics Methods/One_Proportion_Obama_Care_Fa16.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/One_Proportion_Obama_Care_Fa16.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
p1
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Exam1.R', echo=TRUE)
install.packages('R2OpenBUGS',type='source')
DIC is an estimate of expected predictive error (lower deviance is better).
print(schools.sim)
#Load the OpenBUGS Package - make sure XQuartz is running
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages('R2OpenBUGS',type='source')
install.packages("R2OpenBUGS", type = "source")
source('~/.active-rstudio-document', echo=TRUE)
library(R2OpenBUGS)
install.packages("R2OpenBUGS", type = "source")
install.packages("R2OpenBUGS", type = "source")
library(R2OpenBUGS)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(R2OpenBUGS)
source('~/.active-rstudio-document', echo=TRUE)
OpenBUGS.pgm='~/.wine/drive_c/Program\ Files/OpenBUGS/OpenBUGS323/OpenBUGS.exe'
source('~/.active-rstudio-document', echo=TRUE)
install.packages("R2OpenBUGS")
install.packages("R2OpenBUGS")
OpenBUGS.pgm='/var/folders/xg/jrsk5wyj27q70835kh3ntdbw0000gn/T//RtmpFPoRf5/downloaded_packages'
source('~/.active-rstudio-document', echo=TRUE)
OpenBUGS.pgm=~/.wine/drive_c/Program\ Files/OpenBUGS/OpenBUGS323/OpenBUGS.exe
OpenBUGS.pgm="~/.wine/drive_c/Program\ Files/OpenBUGS/OpenBUGS323/OpenBUGS.exe"
source('~/.active-rstudio-document', echo=TRUE)
install.packages('R2OpenBUGS',type='source')
install.packages("R2OpenBUGS", type = "source")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("R2OpenBUGS")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("R2OpenBUGS")
install.packages("R2OpenBUGS")
source('~/.active-rstudio-document', echo=TRUE)
uninstall.packages("R2OpenBUGS")
file.show(system.file("NEWS", package="R2OpenBUGS"))
library(help="R2OpenBUGS")
R2OpenBUGS-package
bugs.data()
bugs
findOpenBUGS()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bugs(linedata)
library(R2OpenBUGS)
bugs.run()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW4.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/HW5.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Final Exam.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Final Exam.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Final Exam.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Final Exam.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Final Exam.R', echo=TRUE)
source('~/Documents/Bayesian Statistics Methods/Final Exam.R', echo=TRUE)
